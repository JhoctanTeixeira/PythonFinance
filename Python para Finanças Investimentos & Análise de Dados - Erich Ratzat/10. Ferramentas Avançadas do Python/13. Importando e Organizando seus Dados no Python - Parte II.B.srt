1

00:00:00,789  -->  00:00:06,569
Primeiro, para baixar informações sobre uma única
ação pelo IEX, você só precisa substituir o

2

00:00:06,569  -->  00:00:15,340
"morningstar" pelo 'IEX', e 1995
por 2015, nesta linha do código.

3

00:00:15,340  -->  00:00:19,520
Agora é só executar a célula.

4

00:00:19,520  -->  00:00:22,240
Consegue ver?

5

00:00:22,240  -->  00:00:29,770
Você obteve um resultado com preços das
ações a partir de primeiro de janeiro de 2015,

6

00:00:29,770  -->  00:00:35,300
Isso porque a IEX só fornece dados dos
últimos de 5 anos em relação a data que

7

00:00:35,300  -->  00:00:36,740
você especifica no seu código.

8

00:00:36,740  -->  00:00:42,390
Agora, vamos ver como se pode extrair dados
de varias ações ao mesmo tempo no IEX.

9

00:00:42,390  -->  00:00:48,480
Para começar, teremos que criar uma lista com
os símbolos das empresas que acabei de

10

00:00:48,480  -->  00:00:49,650
mencionar.

11

00:00:49,650  -->  00:00:57,810
São elas "PG", "MSFT", "T",
"F", e "GE".

12

00:00:57,810  -->  00:01:02,310
Você se lembra de como criamos um dicionário
digitando seu nome e atribuindo a ele um

13

00:01:02,310  -->  00:01:07,130
valor vazio dentro de chaves e, em seguida, preenchendo-o
com seus respectivos valores?

14

00:01:07,130  -->  00:01:09,960
A lógica que vamos fazer aqui é semelhante.

15

00:01:09,960  -->  00:01:16,510
Eu vou criar um novo data-frame a partir do
pandas e vou chamá-lo "new data".

16

00:01:16,510  -->  00:01:19,690
Como eu vou preencher as informações?

17

00:01:19,690  -->  00:01:22,990
Linha por linha por pelo menos 22 anos?

18

00:01:22,990  -->  00:01:24,040
Claro que não.

19

00:01:24,040  -->  00:01:29,220
Como já mencionado, um dos problemas
ao trabalho com o IEX é que teremos apenas os dados

20

00:01:29,220  -->  00:01:31,900
dos últimos cinco anos disponíveis.

21

00:01:31,900  -->  00:01:38,430
No entanto, embora essa API forneça uma quantidade
limitada de dados, ela é perfeitamente adequada para

22

00:01:38,430  -->  00:01:39,430
esse curso.

23

00:01:39,430  -->  00:01:43,170
Portanto, ainda podemos usá-la para este exercício.

24

00:01:43,170  -->  00:01:49,060
Agora, em vez de preencher nosso data-frame
com informações linha por linha, eu prefiro

25

00:01:49,060  -->  00:01:55,530
lembrar o que sei sobre iteração em Python,
e vou escrever o seguinte comando: "for every ticker in tickers",

26

00:01:55,530  -->  00:02:03,270
"t" em tickers, para abreviar, dois pontos, me forneça
o preço de fechamento para cada ticker

27

00:02:03,270  -->  00:02:09,819
para cada instância, ou seja, para cada dia,
desde de 1 de janeiro de 2015.

28

00:02:09,819  -->  00:02:17,671
A sintaxe correta é:
Para 'new data' com um índice de t, atribua

29

00:02:17,671  -->  00:02:24,260
o resultado da função do Data-Reader para
t da fonte IEX, a partir de 1 de janeiro

30

00:02:24,260  -->  00:02:27,569
de 2015.

31

00:02:27,569  -->  00:02:31,840
Esse comando é o mesmo que usamos
para baixar os dados da P & G.

32

00:02:31,840  -->  00:02:41,370
A diferença é que, aqui, tivemos que indexar
"t" no novo objeto de dados lá no início.

33

00:02:41,370  -->  00:02:46,909
E, já que estamos interessados
​​apenas na coluna de preço de fechamento, no

34

00:02:46,909  -->  00:02:53,049
final da linha, nós devemos indicar entre colchetes
o nome exato da coluna.

35

00:02:53,049  -->  00:02:58,519
Lembre-se que esta API usa apenas letras minúsculas
para escrever seus nomes na coluna, então nós devemos digitar

36

00:02:58,519  -->  00:03:01,930
'close' somente em letras minúsculas.

37

00:03:01,930  -->  00:03:05,639
Ok, pronto.

38

00:03:05,639  -->  00:03:10,430
Isso só vai funcionar se as informações
de todas as 5 empresas forem organizadas da mesma

39

00:03:10,430  -->  00:03:13,889
maneira, com os mesmos nomes de coluna.

40

00:03:13,889  -->  00:03:15,769
E será que vai ser?

41

00:03:15,769  -->  00:03:29,849
Vamos executar e verificar as últimas linhas do
novo conjunto de dados.

42

00:03:29,849  -->  00:03:31,999
Parece ok, certo?

43

00:03:31,999  -->  00:03:37,430
Como você pode ver, as fontes de dados on-line
fornecem apenas uma parte limitada das informações

44

00:03:37,430  -->  00:03:38,460
de que precisamos para nossas análises.

45

00:03:38,460  -->  00:03:45,390
Além disso, nos arquivos de suporte anexados
a esses vídeos, também vamos explicar como

46

00:03:45,390  -->  00:03:49,219
você pode usar outra API - da "Alpha Vantage".

47

00:03:49,219  -->  00:03:55,170
No entanto, esta não é a opção mais fácil
do ponto de vista de programação.

48

00:03:55,170  -->  00:04:00,730
O lado bom, no entanto, é que ela contém uma
grande quantidade de dados que é bem interessante.

49

00:04:00,730  -->  00:04:06,010
Portanto, se você estiver interessado e sentindo-se
preparado o suficiente para programar em Python ou

50

00:04:06,010  -->  00:04:10,810
estiver pronto para um desafio, por favor, de uma
nesses arquivos que estão la nos recursos.

51

00:04:10,810  -->  00:04:16,400
Outra opção seria ficar com os arquivos CSV, que
vamos mostrar como usar nos próximos

52

00:04:16,400  -->  00:04:17,880
vídeos.

53

00:04:17,880  -->  00:04:22,250
Enquanto isso, não esqueça que ao clicar
no link fornecido na seção de recursos

54

00:04:22,250  -->  00:04:27,470
dos vídeos você pode acessar os arquivos que contem
os códigos exibidos nas aulas.

55

00:04:27,470  -->  00:04:32,370
Nós recomendamos você a verificar os arquivos fornecidos
pois muitas vezes eles contêm

56

00:04:32,370  -->  00:04:35,930
informações adicionais e úteis.

57

00:04:35,930  -->  00:04:36,880
Obrigado por assistir!
