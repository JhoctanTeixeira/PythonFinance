1

00:00:01,010  -->  00:00:05,670
OK, deixe-me explicar um conceito de programação que
também é válido para outras linguagens de

2

00:00:05,670  -->  00:00:06,850
programação.

3

00:00:06,850  -->  00:00:14,380
Se eu atribuir o valor de 1 a uma variável z,
meu resultado após executar o código será 1.

4

00:00:14,560  -->  00:00:23,240
Depois disso, se eu atribuir 3 a mesma variável
z, z será igual a 3, e não 1.

5

00:00:23,240  -->  00:00:24,240
Como pode isso?

6

00:00:24,240  -->  00:00:26,480
Acontece que a ordem dos comandos é importante.

7

00:00:26,480  -->  00:00:32,300
Inicialmente, dissemos que z seria igual a 1, e
isso era verdade até mudarmos o valor para

8

00:00:32,300  -->  00:00:33,430
3.

9

00:00:33,430  -->  00:00:38,499
Para o computador, a partir desse momento, z não
é igual a 1, e ele continuará sendo

10

00:00:38,499  -->  00:00:40,600
3.

11

00:00:40,600  -->  00:00:49,309
Para provar, veja isto - se adicionarmos 5 a z, nós
teremos 8, e não 1 mais 5, que seria

12

00:00:49,309  -->  00:00:50,309
6.

13

00:00:50,309  -->  00:00:57,649
Então, se de repente decidirmos que z é igual a
7, z não será mais igual a 1 ou 3.

14

00:00:57,649  -->  00:01:00,619
O Python reatribui valores a seus objetos.

15

00:01:00,619  -->  00:01:04,830
Portanto, lembre-se que o último comando é o válido,
e os comandos mais antigos são sobrescritos.

16

00:01:04,830  -->  00:01:05,830
Você precisa prestar atenção nisso.

17

00:01:05,830  -->  00:01:06,830
Você se lembra que apenas podemos combinar números
e não strings, certo?

18

00:01:06,830  -->  00:01:07,830
Se você colocar 5 entre aspas aqui, o Python não
será capaz de fazer o cálculo, e você

19

00:01:07,830  -->  00:01:08,830
será advertido para corrigir as variáveis que você
usou na operação.

20

00:01:08,830  -->  00:01:09,830
As operações precisam ter o mesmo tipo de dados,
nesse caso - números, como inteiros, decimais,

21

00:01:09,830  -->  00:01:10,830
ou ambos.

22

00:01:10,830  -->  00:01:10,833
Obrigado por assistir!
