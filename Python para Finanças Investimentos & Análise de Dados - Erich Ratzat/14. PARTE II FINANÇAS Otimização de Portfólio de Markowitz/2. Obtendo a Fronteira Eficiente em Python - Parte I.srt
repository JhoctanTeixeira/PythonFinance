1

00:00:00,880  -->  00:00:02,490
Ok, ótimo!

2

00:00:02,490  -->  00:00:03,490
Preparem-se.

3

00:00:03,490  -->  00:00:07,860
Nesta aula, nós vamos fazer um
exercício bem interessante de Python.

4

00:00:07,860  -->  00:00:12,850
Nós vamos aprender como calcular a fronteira
eficiente de um grupo de portfólios compostos

5

00:00:12,850  -->  00:00:18,579
por dois ativos - as ações da Procter & Gamble
e e o índice S&P 500.

6

00:00:18,579  -->  00:00:22,060
Se você achar que vai ser complicado,
não se preocupe!

7

00:00:22,060  -->  00:00:26,779
Nós vamos fazer um passo a passo que vai ser
fácil de entender.

8

00:00:26,779  -->  00:00:31,489
Toda a ideia de eficiência de uma carteira de investimentos vai se
tornar muito mais fácil para você.

9

00:00:31,489  -->  00:00:32,739
Está animado?

10

00:00:32,739  -->  00:00:33,739
Ótimo!

11

00:00:33,739  -->  00:00:35,760
Vamos começar.

12

00:00:35,760  -->  00:00:41,090
A primeira coisa que vamos fazer é importar as bibliotecas
e módulos que normalmente usamos em nossas análises.

13

00:00:41,090  -->  00:00:45,300
Além disso, vamos importar o "Matplotlib
Inline".

14

00:00:45,300  -->  00:00:50,920
Esse é um recurso fornecido pelo Python, disponível
exclusivamente para se trabalhar no Jupyter Notebook.

15

00:00:50,920  -->  00:00:56,050
Ele facilita a plotagem de gráficos usando o Matplotlib
logo abaixo das células de código e o armazenamento delas

16

00:00:56,050  -->  00:00:57,820
no documento do Jupyter.

17

00:00:57,820  -->  00:01:05,860
Nós vamos poder importar esse módulo digitando
o sinal de porcentagem seguido do comando Matplotlib Inline.

18

00:01:05,860  -->  00:01:13,280
Os dois ativos de interesse são a P&G e o
S&P 500, os dois serão armazenados em uma lista chamada "assets".

19

00:01:13,280  -->  00:01:22,799
Vamos usar os dados dos últimos anos, começando
a partir de 2010.

20

00:01:22,799  -->  00:01:25,110
Pronto.

21

00:01:25,110  -->  00:01:31,439
Vamos prosseguir com algumas etapas padrão - vamos normalizar os dados
para 100 e plotar os dados da carteira em

22

00:01:31,439  -->  00:01:37,439
um gráfico para ver como os dois ativos estão se
comportam no período de analisado.

23

00:01:37,439  -->  00:01:39,329
Ok.

24

00:01:39,329  -->  00:01:46,100
Então, se quisermos obter uma fronteira eficiente
composta por esses ativos, nós vamos precisar de seus

25

00:01:46,100  -->  00:01:48,490
retornos logarítmicos.

26

00:01:48,490  -->  00:01:58,630
Então, vamos precisar de sua média e de sua
covariância e as matrizes de correlação.

27

00:01:58,630  -->  00:02:01,619
Ok.

28

00:02:01,619  -->  00:02:07,549
Podemos ver facilmente que a P&G e o S&P 500 tiveram
uma taxa de retorno consistente durante o período de tempo

29

00:02:07,549  -->  00:02:11,140
analisado e os seus retornos estão bem correlacionados.

30

00:02:11,140  -->  00:02:13,060
Muito Bom.

31

00:02:13,060  -->  00:02:20,900
Agora, vamos abordar uma otimização do portfólio
por uma perspectiva mais técnica.

32

00:02:20,900  -->  00:02:26,680
Primeiro, devemos criar uma variável que vai
carregar o número de ativos em nossa carteira.

33

00:02:26,680  -->  00:02:31,340
Vamos usá-la em nossas fórmulas, para que elas
possam responder a uma mudança no número de ativos

34

00:02:31,340  -->  00:02:33,720
que compõem a carteira.

35

00:02:33,720  -->  00:02:37,120
Vamos calcular o número de elementos da nossa
lista "assets".

36

00:02:37,120  -->  00:02:42,510
Nós podemos obter esse número com a ajuda da
função "len".

37

00:02:42,510  -->  00:02:49,140
No nosso caso, estamos falando de 2 ativos
- a P&G e o S&P 500.

38

00:02:49,140  -->  00:02:50,400
Ok.

39

00:02:50,400  -->  00:02:51,659
Agora...

40

00:02:51,659  -->  00:02:55,120
Nós temos que criar dois pesos aleatórios, certo?

41

00:02:55,120  -->  00:03:00,320
O método random.random do NumPy pode gerar dois
números decimais entre 0 e 1.

42

00:03:00,320  -->  00:03:04,430
Vamos executar esse código e… o resultado são dois novos
valores!

43

00:03:04,430  -->  00:03:05,430
Legal!

44

00:03:05,430  -->  00:03:12,200
Na próxima célula, eu vou combinar os dois valores
dessa matriz para ver o valor da soma.

45

00:03:12,200  -->  00:03:13,200
Consegue ver?

46

00:03:13,200  -->  00:03:15,190
Eles não somam 1.

47

00:03:15,190  -->  00:03:21,430
Eu espero que você concorde que eu tenho que reexecutar essas células
muitas vezes se eu quiser que a soma delas seja igual a

48

00:03:21,430  -->  00:03:26,320
um, certo?

49

00:03:26,320  -->  00:03:30,480
Em vez disso, aqui está o que podemos fazer.

50

00:03:30,480  -->  00:03:36,260
Na primeira linha, basta atribuir dois números
aleatórios entre 0 e 1 para a nova matriz NumPy

51

00:03:36,260  -->  00:03:39,280
chamada "weights".

52

00:03:39,280  -->  00:03:43,560
O truque é adicionar uma linha de código que vem
depois disso.

53

00:03:43,560  -->  00:03:48,820
Na seção de loops, nós introduzimos incrementando.

54

00:03:48,820  -->  00:03:50,190
Vocês conseguem se lembrar o que era?

55

00:03:50,190  -->  00:03:55,460
E vocês se lembram que a sintaxe "+=" pode ser usada para designar que

56

00:03:55,460  -->  00:04:00,901
queremos que a variável do lado esquerdo seja reatribuída
com a mesma variável mais o valor da

57

00:04:00,901  -->  00:04:04,480
expressão no lado direito?

58

00:04:04,480  -->  00:04:09,840
A lógica é idêntica com a diferença
de que a operação aritmética não vai ser uma soma,

59

00:04:09,840  -->  00:04:11,770
mas uma divisão.

60

00:04:11,770  -->  00:04:17,120
"Weights" vai ser definido como uma variável
igual a "weights" dividido pela soma

61

00:04:17,120  -->  00:04:21,720
desses pesos.

62

00:04:21,720  -->  00:04:26,000
Ainda é difícil de acreditar que isso vai fazer com que a soma
dos dois valores gerados aleatoriamente seja igual

63

00:04:26,000  -->  00:04:27,290
a 1?

64

00:04:27,290  -->  00:04:32,510
Por favor não se esqueça que "weights" é uma
matriz.

65

00:04:32,510  -->  00:04:37,470
Isso significa, que com a segunda linha do código,
que nós transformamos os valores da nossa matriz em "w

66

00:04:37,470  -->  00:04:47,940
1" sobre "w 1 mais w 2", e "w 2"
sobre "w 1 mais w 2", respectivamente.

67

00:04:47,940  -->  00:04:59,600
Bem, quando somarmos esses dois, nós vamos obter
"w 1 mais w 2" sobre "w 1 mais w 2",

68

00:04:59,600  -->  00:05:02,730
que é igual a um.

69

00:05:02,730  -->  00:05:06,540
Vamos ver...

70

00:05:06,540  -->  00:05:10,350
Sim, de fato!

71

00:05:10,350  -->  00:05:16,290
Portanto, lembre-se desta célula, especificamente,
essa linha do código!

72

00:05:16,290  -->  00:05:23,410
Isso permite obter dois pesos gerados
aleatoriamente, cuja soma será sempre igual a 1!

73

00:05:23,410  -->  00:05:24,410
Ótimo!

74

00:05:24,410  -->  00:05:29,790
Eu considero esta aula um preâmbulo para a
próxima, que é o ponto crucial da aula

75

00:05:29,790  -->  00:05:33,270
de finanças sobre a teoria do portfólio de Markowitz.

76

00:05:33,270  -->  00:05:34,650
Vejo você no próximo video!
