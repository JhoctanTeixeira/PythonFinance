1

00:00:01,150  -->  00:00:03,150
Ótimo trabalho até agora.

2

00:00:03,150  -->  00:00:07,779
Agora vamos avançar em nossas análises mais um pouco.

3

00:00:07,779  -->  00:00:12,530
A seguir vamos escrever a fórmula para o retorno esperado
de um portfólio.

4

00:00:12,530  -->  00:00:17,970
A fórmula é dada pela soma da média dos retorno logarítmico
anualizados ponderados pelo seus pesos.

5

00:00:17,970  -->  00:00:19,830
Uau!

6

00:00:19,830  -->  00:00:26,100
Isso soou muito complicado, mas matematicamente é simples.

7

00:00:26,100  -->  00:00:31,869
Preste atenção que isso não é a função nativa "sum" -
o NumPy tem um método análogo

8

00:00:31,869  -->  00:00:37,000
que permite somar valores em objetos
multidimensionais. Isso vai funcionar perfeitamente

9

00:00:37,000  -->  00:00:43,140
para o nosso caso, então a sintaxe correta é
“NumPy ponto sum”.

10

00:00:43,140  -->  00:00:44,720
Ok.

11

00:00:44,720  -->  00:00:50,190
As duas células na sequência são uma atualização.
Esse é o código que fornecerá a

12

00:00:50,190  -->  00:00:57,800
variância e a volatilidade esperadas do portfólio,
respectivamente.

13

00:00:57,800  -->  00:01:00,580
Ok.

14

00:01:00,580  -->  00:01:05,070
Nós passamos por essas três células porque
precisaremos das fórmulas para o

15

00:01:05,070  -->  00:01:09,960
retorno e a volatilidade na simulação das carteiras
de média variância.

16

00:01:09,960  -->  00:01:13,140
É isso mesmo!

17

00:01:13,140  -->  00:01:18,910
Vamos criar um gráfico onde 1000 simulações de média variância
serão plotadas.

18

00:01:18,910  -->  00:01:24,200
Por isso, lembre-se da seguinte nota, pois
é muito importante.

19

00:01:24,200  -->  00:01:28,990
Nós não estamos considerando 1000 investimentos diversos
compostos de diferentes ações.

20

00:01:28,990  -->  00:01:31,320
Não, nós não faremos isso.

21

00:01:31,320  -->  00:01:38,710
Estamos considerando 1000 combinações dos mesmos
dois ativos: P&G e S&P 500.

22

00:01:38,710  -->  00:01:43,690
Isso significa que simulamos 1000 combinações
dos valores de seus pesos.

23

00:01:43,690  -->  00:01:51,010
Das 1000 combinações, nós provavelmente
teremos um portfólio composto de 1% com ações da P&G e 99%

24

00:01:51,010  -->  00:01:57,080
com o S&P 500 e um portfólio composto de 99% com ações da P&G
e 1% com o S&P 500.

25

00:01:57,080  -->  00:02:04,350
A idéia é comparar os dois portfólios e ver qual
deles é eficiente.

26

00:02:04,350  -->  00:02:05,350
Ok.

27

00:02:05,350  -->  00:02:11,329
Na próxima célula, o foco não é tanto
no código.

28

00:02:11,329  -->  00:02:16,870
Tente entender o raciocínio que explica o
fluxo das operações relacionadas.

29

00:02:16,870  -->  00:02:21,959
Dissemos que nosso objetivo é criar um gráfico que
mostre os retornos hipotéticos da carteira

30

00:02:21,959  -->  00:02:23,650
versus a volatilidade.

31

00:02:23,650  -->  00:02:28,040
Portanto, precisaremos de dois objetos onde
iremos armazenar esses dados.

32

00:02:28,040  -->  00:02:34,090
Assim, os retornos do portfólio começam como uma lista
vazia e pretendemos preenche-la com retornos esperados

33

00:02:34,090  -->  00:02:39,159
gerados aleatoriamente.

34

00:02:39,159  -->  00:02:43,409
Faremos a mesma coisa para as volatilidades do
portfólio.

35

00:02:43,409  -->  00:02:45,079
Beleza.

36

00:02:45,079  -->  00:02:49,099
Precisaremos escrever um loop que será repetido
mil vezes.

37

00:02:49,099  -->  00:02:54,129
Aqui você pode ver o quão útil a função 'range'
pode ser.

38

00:02:54,129  -->  00:03:02,650
No corpo do loop vamos gerar aleatoriamente
dois pesos, onde a soma vai ser igual a 1.

39

00:03:02,650  -->  00:03:08,870
Precisamos de dois pesos porque como já mencionamos,
os portfólios possuem dois ativos.

40

00:03:08,870  -->  00:03:14,540
Caso o número de ativos fosse superior a 2, imaginemos que fossem
5 por exemplo, o número de pesos gerados seria

41

00:03:14,540  -->  00:03:15,790
5.

42

00:03:15,790  -->  00:03:17,049
Ok.

43

00:03:17,049  -->  00:03:22,139
As próximas duas linhas de código são de suma
importância.

44

00:03:22,139  -->  00:03:27,120
A chave do negócio aqui é o método "append" que
adicionará em nossa lista “portfolio returns”

45

00:03:27,120  -->  00:03:30,560
cada valor de retorno do portfólio gerado aleatoriamente.

46

00:03:30,560  -->  00:03:36,169
E esta operação será repetida para cada
passagem do loop até que a nossa lista “portfolio returns”

47

00:03:36,169  -->  00:03:43,799
acumule 1000 observações.

48

00:03:43,799  -->  00:03:49,980
Como estamos calculando o retorno esperado futuro do nosso portfólio,
tivemos que inserir a fórmula mencionada há alguns minutos

49

00:03:49,980  -->  00:03:54,819
entre parênteses.

50

00:03:54,819  -->  00:04:05,189
Na linha seguinte, repetimos o mesmo procedimento
para a volatilidade de carteira.

51

00:04:05,189  -->  00:04:10,680
Usaremos o método “append” e executaremos
a fórmula para o desvio padrão.

52

00:04:10,680  -->  00:04:12,709
Ótimo!

53

00:04:12,709  -->  00:04:18,519
Vamos ver como ficou o retorno e a volatilidade do nosso

54

00:04:18,519  -->  00:04:21,509
portfólio.

55

00:04:21,509  -->  00:04:26,280
Nós não iremos contar os valores, mas
mas aparentemente temos duas listas super longas

56

00:04:26,280  -->  00:04:31,960
contendo 1000 valores cada.

57

00:04:31,960  -->  00:04:40,170
De qualquer forma, estamos no caminho certo, mas
ainda não chegamos lá.

58

00:04:40,170  -->  00:04:43,840
Primeiro, essas listas são difíceis de manipular.

59

00:04:43,840  -->  00:04:48,430
O terceiro segredo que gostaríamos de mostrar é
como você pode converter essas listas em arrays

60

00:04:48,430  -->  00:04:49,780
usando o Numpy

61

00:04:49,780  -->  00:04:52,990
Vamos dar os mesmos nomes para esses arrays.

62

00:04:52,990  -->  00:04:56,590
A sintaxe é intuitiva e você já a conhece
bem agora.

63

00:04:56,590  -->  00:05:02,360
Apenas não pule este passo importante quando for plotar
a fronteira eficiente.

64

00:05:02,360  -->  00:05:04,460
Beleza?!

65

00:05:04,460  -->  00:05:10,610
Agora podemos ver que duas variáveis ​​foram
organizadas de maneira diferente desta vez - elas

66

00:05:10,610  -->  00:05:11,800
agora são arrays (ou matrizes).

67

00:05:11,800  -->  00:05:12,990
Maravilha!

68

00:05:12,990  -->  00:05:16,580
No próximo vídeo, vamos plotar os resultados
em um gráfico.

69

00:05:16,580  -->  00:05:17,669
Obrigado por assistir!
