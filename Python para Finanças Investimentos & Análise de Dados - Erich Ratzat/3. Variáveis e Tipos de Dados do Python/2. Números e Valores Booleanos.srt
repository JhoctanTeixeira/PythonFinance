1

00:00:00,740  -->  00:00:05,960
Quando estiver programando, não somente em Python, se você
disser que uma variável tem um valor numérico, você

2

00:00:05,960  -->  00:00:07,630
estará sendo ambíguo.

3

00:00:07,630  -->  00:00:13,150
A razão é que os números podem ser números inteiros
ou decimais, também chamados de floats em inglês, por

4

00:00:13,150  -->  00:00:14,150
exemplo.

5

00:00:14,150  -->  00:00:18,120
Inteiros são números inteiros positivos ou negativos
sem um ponto decimal.

6

00:00:18,120  -->  00:00:23,410
Vamos criar a variável x1 e armazenar o valor
de 5.

7

00:00:23,410  -->  00:00:26,820
Agora, x1 é um inteiro.

8

00:00:26,820  -->  00:00:28,699
Você concorda?

9

00:00:28,699  -->  00:00:32,509
Tem uma função específica no Python que pode provar que isso
está correto.

10

00:00:32,509  -->  00:00:35,820
É a função "type".

11

00:00:35,820  -->  00:00:41,450
Dentro dos parênteses, devemos colocar o nome
da variável cujo tipo de valor queremos

12

00:00:41,450  -->  00:00:42,450
verificar.

13

00:00:42,450  -->  00:00:44,630
Então, neste caso, vou digitar x1.

14

00:00:44,630  -->  00:00:46,440
Ok.

15

00:00:46,440  -->  00:00:51,860
Shift mais Enter e o resultado que obteremos
é "int", que indica que o valor é

16

00:00:51,860  -->  00:00:54,620
um inteiro.

17

00:00:54,620  -->  00:00:59,810
A função "type" pode ser aplicada
diretamente a um valor ao invés de uma variável.

18

00:00:59,810  -->  00:01:06,369
Por exemplo, se eu escrever "type" abrir parênteses,
menos 6, e fechar parênteses", o Python irá

19

00:01:06,369  -->  00:01:10,440
apontar corretamente que menos seis é um inteiro.

20

00:01:10,440  -->  00:01:11,440
Ok.

21

00:01:11,900  -->  00:01:17,820
Agora, vamos atribuir o valor de 4.75 para uma
nova variável, x2.

22

00:01:17,820  -->  00:01:25,960
Eu gostaria de verificar qual é o tipo dessa variável; então
vou usar a função "type" novamente.

23

00:01:25,960  -->  00:01:28,180
O resultado é um float, ou seja, um número decimal.

24

00:01:28,280  -->  00:01:29,960
Ótimo!

25

00:01:29,969  -->  00:01:34,210
Decimais, ou como você vai escutar bastante,
floats, são números reais.

26

00:01:34,210  -->  00:01:36,580
Logo, eles têm um ponto decimal.

27

00:01:36,580  -->  00:01:43,360
4.75 é um exemplo; assim, o Python vai ler
essa variável como um número decimal.

28

00:01:43,800  -->  00:01:46,780
Vamos ver outras duas funções nativas do Python.

29

00:01:46,780  -->  00:01:51,140
A função "int" transforma a variável em um
inteiro.

30

00:01:52,420  -->  00:01:57,500
É por isso que 4.75 se torna 4.

31

00:01:58,280  -->  00:02:03,400
A função "float", ao contrário, irá adicionar um ponto decimal
para o valor inteiro e irá transformá-lo em

32

00:02:03,400  -->  00:02:05,500
um número decimal.

33

00:02:06,540  -->  00:02:09,780
Nem todas as variáveis ​​irão assumir valores numéricos.

34

00:02:09,780  -->  00:02:13,390
Um exemplo que nao é numérico é o tipo booleano.

35

00:02:13,390  -->  00:02:17,990
Em Python, isso significa um valor "Verdadeiro" ou "Falso",
correspondente à lógica binária da máquina

36

00:02:17,990  -->  00:02:24,490
entender 0 ou 1, ligado ou desligado, certo
ou errado, verdadeiro ou falso.

37

00:02:24,490  -->  00:02:31,550
Vamos ver um exemplo com uma nova variável
x3, que tem valor como "Verdadeiro", "True" em inglês.

38

00:02:31,550  -->  00:02:33,070
Ok!

39

00:02:33,070  -->  00:02:39,290
O resultado da função "type" é 'bool',
o que significa simplesmente que x3 é uma variável Booleana.

40

00:02:39,290  -->  00:02:44,750
Um detalhe importante que você deve lembrar é
que você tem que digitar True ou False com letras

41

00:02:44,750  -->  00:02:45,750
maiúsculas!

42

00:02:45,750  -->  00:02:52,820
Caso contrário, o Python não reconhecerá sua variável
como Booleana e exibirá uma mensagem de erro.

43

00:02:53,580  -->  00:02:59,880
Então, em resumo, os dois valores booleanos
que uma variável pode ter são True ou False.

44

00:02:59,880  -->  00:03:02,960
E eles devem ser escritos com letras maiúsculas.

45

00:03:02,960  -->  00:03:03,950
Obrigado por assistir!
